using UnityEngine;
using System.Collections;

using System;
using System.Text;
using System.Collections.Generic;
using UnityEngine.Events;
using UnityEngine.Networking;
using System.IO;
#if !UNITY_EDITOR
using Windows.Networking.Sockets;
using Windows.Networking.Connectivity;
using Windows.Networking;
#endif

[System.Serializable]
public class UDPMessageEvent : UnityEvent<string, string, byte[]>
{

}

//Vorher NetworkPoseSink jetzt auf UnityPerspektive geändert
public class NetworkPoseSink : MonoBehaviour
{
    [Tooltip("IP-Address for sending")]
    private string externalIP = "131.159.10.129";

    [Tooltip("Port for sending")]
    private string externalPort = "41000";

    [Tooltip("Send a message at Startup")]
    public bool sendPingAtStart = true;

    [Tooltip("Conten of Ping")]
    public string PingMessage = "hello";

    [Tooltip("Function to invoke at incoming packet")]
    public UDPMessageEvent udpEvent = null;

    private readonly Queue<Action> ExecuteOnMainThread = new Queue<Action>();


    public string id = "holoPoseeee";
    static readonly DateTime StartOfEpoch = new DateTime(1970, 1, 1);
    //NetworkClient myClient;
    // RegisterHostMessage msg = new RegisterHostMessage();
    //public const short RegisterHostMsgId = 888;
    string dataString = "hello";
    float rotX, rotY, posZ;
    //Camera m_MainCamera;
    private GameObject cam;
#if !UNITY_EDITOR

    //Send an UDP-Packet
    public async void SendUDPMessage(string HostIP, string HostPort, byte[] data)
    {
        await _SendUDPMessage(HostIP, HostPort, data);
    }

    DatagramSocket socket;


    

    // Use this for initialization
    async void Start()
    {
        cam = GameObject.FindWithTag("MainCamera");

        dataString = "22 serialization::archive 13 11 " + id + " 0 0 " + getUbitrackTimeStamp() + " 0 0 0 0 "
                 + rotX + " " + rotY + " " + cam.transform.rotation.z.ToString()
                 + " " + cam.transform.rotation.w.ToString() + " 0 0 " + cam.transform.position.x.ToString() + " " + cam.transform.position.y.ToString()
                 + " " + posZ + " " + getUbitrackTimeStamp() + " 1";

        socket = new DatagramSocket();

        if (sendPingAtStart)
        {
            SendUDPMessage(externalIP, externalPort, Encoding.ASCII.GetBytes(dataString));
            Debug.Log("msg sent");
        }

    }

    private async System.Threading.Tasks.Task _SendUDPMessage(string externalIP, string externalPort, byte[] data)
    {
        using (var stream = await socket.GetOutputStreamAsync(new Windows.Networking.HostName(externalIP), externalPort))
        {
            using (var writer = new Windows.Storage.Streams.DataWriter(stream))
            {
                writer.WriteBytes(data);
                await writer.StoreAsync();

            }
        }
    }

#else
    // to make Unity-Editor happy :-)
    void Start()
    {
        
    }

     public void SendUDPMessage(string HostIP, string HostPort, byte[] data)
    {

    }

#endif

    static MemoryStream ToMemoryStream(Stream input)
    {
        try
        {                                         // Read and write in
            byte[] block = new byte[0x1000];       // blocks of 4K.
            MemoryStream ms = new MemoryStream();
            while (true)
            {
                int bytesRead = input.Read(block, 0, block.Length);
                if (bytesRead == 0) return ms;
                ms.Write(block, 0, bytesRead);
            }
        }
        finally { }
    }

    void OnEnable()
    {
        //Establish a Connection

    }

    void OnDisable()
    {

    }

    // Update is called once per frame
    void Update()
    {

        //while (ExecuteOnMainThread.Count > 0)
        //{
        //    ExecuteOnMainThread.Dequeue().Invoke();

        //}

        rotX = -1.0f * cam.transform.rotation.x;
        rotY = -1.0f * cam.transform.rotation.y;
        posZ = -1.0f * cam.transform.position.z;

        dataString = "22 serialization::archive 13 11 " + id + " 0 0 " + getUbitrackTimeStamp() + " 0 0 0 0 "
                 + rotX + " " + rotY + " " + cam.transform.rotation.z.ToString()
                 + " " + cam.transform.rotation.w.ToString() + " 0 0 " + cam.transform.position.x.ToString() + " " + cam.transform.position.y.ToString()
                 + " " + posZ + " " + getUbitrackTimeStamp() + " 1";

        // Byte[] data = Encoding.ASCII.GetBytes(dataString);

       /* try
        {
            // udpClient.Send(data, data.Length);
           // msg.dataString = dataString;
            myClient.Send(RegisterHostMsgId, msg);
        }
        catch (Exception e)
        {
            Debug.Log(e.ToString());
        }*/
    }

    private ulong getUbitrackTimeStamp()
    {
        ulong millis = (ulong)(DateTime.UtcNow - StartOfEpoch).Ticks / TimeSpan.TicksPerMillisecond;
        return millis * 1000000;
    }

    //public void SetupClient()
    //{
    //    myClient = new NetworkClient();
    //    myClient.RegisterHandler(MsgType.Connect, OnConnected);
    //    try
    //    {
    //        myClient.Connect("131.159.10.129", 21844);
    //    }
    //    catch (Exception e)
    //    {
    //        Debug.Log(e.ToString());
    //    }
    //}

    //public void OnConnected(NetworkMessage netMsg)
    //{
    //    Debug.Log("Connected to server");
    //}
}